uri_get = paste(uri, username, sep="")
curl_uri <- curl(uri_get)
open(curl_uri)
out <- readLines(curl_uri, n = 3)
cat(out, sep = "\n")
print(out)
print(out, sep = "\n")
print(out, sep = "\n")
cat(out, sep = "\n")
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
str(curl_uri)
jsonlite::prettify(rawToChar(curl_uri$content))
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
df_xxx <- as.data.frame(xxx)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
View(jjj)
df_xxx <- as.data.frame(jjj)
View(df_xxx)
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
alum_skill <- fromJSON(uri_get)
#Forma 3
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
curl_uri <- curl_fetch_memory(uri_get)
open(curl_uri)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
View(df_xxx)
plumber::plumb(file='prueba_json.R')$run()
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
alum_skill <- fromJSON(uri_get)
#Forma 2 pasandole el JSON
json_alum <- '{
"aleman": 2,
"alumno_id": 71,
"analisis_datos": 2,
"bases_datos": 2,
"big_data": 2,
"capacidad_analitica": 2,
"cloud": 2,
"comunicacion": 2,
"decision_making": 2,
"diseno_grafico": 2,
"e_commerce": 2,
"estadistica": 2,
"frances": 2,
"gestion_proyectos": 2,
"grado": 2,
"id": 71,
"ingles": 2,
"inovacion": 2,
"inteligencia_artificial": 2,
"intenet_of_things": 2,
"java": 2,
"liderazgo": 2,
"machine_learning": 2,
"marketing": 2,
"matematicas": 2,
"networks": 2,
"nota_media": 2,
"pascal": 2,
"pensamiento_critico": 2,
"problem_solving": 2,
"python": 2,
"r": 2,
"redes_sociales": 2,
"sistemas_operativos": 2,
"sostenibilidad": 2,
"trabajo_equipo": 2,
"web_desarrollo": 2,
"web_diseno": 2
}'
pruebaa <- fromJSON(json_alum)
df_oruebaa <- as.data.frame(pruebaa)
print(df_oruebaa["alumno_id"])
plumber::plumb(file='prueba_json.R')$run()
#Forma 3
username = 'marquitos'
#Forma 3
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
#Forma 3
username = 'marquitos'
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
#Forma 3
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
install.packages("curl")
library(curl)
library(jsonlite)
curl_uri <- curl_fetch_memory(uri_get)
View(curl_uri)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
View(jjj)
df_xxx <- as.data.frame(jjj)
View(df_xxx)
# Limpio el workspace
rm(list = ls())
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
View(alumnos_antiguos)
alumno_nuevo<-read.xlsx("alumno_nuevo.xlsx")
View(alumno_nuevo)
# Limpio el workspace
rm(list = ls())
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
View(alumno_nuevo)
View(alumno_nuevo)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos_antiguos)
View(alumno_nuevo)
View(alumnos_antiguos)
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
View(alumnos_antiguos)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
View(alumno_nuevo)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos_antiguos)
View(alumno_nuevo)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
write.xlsx(alumno_nuevo,"alumno_nuevo.xlsx")
write.xlsx(alumno_nuevo,"alumno_nuevoPRUEBA.xlsx")
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
colnames(alumno_nuevo)
colnames(alumnos_antiguos)
colnames(alumno_nuevo)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumno_nuevo) <- alumnos_antiguos[,1:36]
colnames(alumnos_antiguos)
colnames(alumno_nuevo)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
alumno_nuevo<- df_xxx
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
View(alumno_nuevo)
View(alumnos_antiguos)
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
alumno_nuevo<- df_xxx
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos)
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos1)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos1<-rbind(alumnos_antiguos,alumno_nuevo)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos1)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- alumnos[,1]
# Utilizo el coseno que es una medida de similaridad cuando no hay nulos
calculoCoseno <- function(x,y){
coseno <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(coseno)
}
# Creo la matriz de item-to-item (alumno-to-alumno)
alumnos.matriz <- matrix(NA,
nrow=ncol(alumnos2),
ncol=ncol(alumnos2),
dimnames=list(colnames(alumnos2),colnames(alumnos2)))
similaridad_alumnos <- as.data.frame(alumnos.matriz)
# Calculo la similaridad utilizando el coseno para esta matriz
for(i in 1:ncol(alumnos2)) {
for(j in 1:ncol(alumnos2)) {
similaridad_alumnos[i,j]= calculoCoseno(alumnos2[i],alumnos2[j])
}
}
# Convierto similaridad en un DF
similaridad_alumnos <- as.data.frame(similaridad_alumnos)
# Identifico los 6 alumnos mÃ¡s similiares a cada alumno (6 vecinos)
# El primer alumno mas similar es el mismo con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_alumnos),ncol=6,dimnames=list(colnames(similaridad_alumnos)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(alumnos.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_alumnos[order(similaridad_alumnos[,i],decreasing=TRUE),][i]))))
}
# AÃ±ado una columna a vecinos con el alumno_id
vecinos <- cbind(vecinos,alumno_id=c(row.names(vecinos)))
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
# Transformo formato numeric para user_id en vecinos
vecinos$alumno_id <- as.numeric(vecinos$alumno_id)
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == alumnonuevo,]
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == 71,]
# Elimino alumno_id
vecinos71<-dplyr::select(vecinos71, -alumno_id)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
names(vecinos71)<-c("vecinos")
# Identifico vecinos comunes entre vecinos71 y vecinos_ofertas_nuevas
union<-merge(x = vecinos_ofertas_nuevas, y = vecinos71, by = "vecinos")
# Identifico las ofertas nuevas a recomendar al alumno71
rec_alumno71<-union[,-1]
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == 71,]
# Elimino alumno_id
vecinos71<-dplyr::select(vecinos71, -alumno_id)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
names(vecinos71)<-c("vecinos")
View(vecinos)
View(vecinos71)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
View(vecinos71)
names(vecinos71)<-c("vecinos")
# Identifico vecinos comunes entre vecinos71 y vecinos_ofertas_nuevas
union<-merge(x = vecinos_ofertas_nuevas, y = vecinos71, by = "vecinos")
# Identifico las ofertas nuevas a recomendar al alumno71
rec_alumno71<-union[,-1]
rec_alumno71<-data.frame(rec_alumno71)
names(rec_alumno71)<-c("job_id")
rec_alumno71$job_id <- as.numeric(rec_alumno71$job_id)
# Elimino job_id repetidas
rec_alumno71<- rec_alumno71 %>% distinct(job_id, .keep_all = TRUE)
# Uno los DF rec_alumno71 y ofertas_nuevas para generar las recomendaciones del alumno71
REC_alumno71<-merge(x = rec_alumno71, y = ofertas_nuevas, by = "job_id")
View(rec_alumno71)
# Limpio el workspace
rm(list = ls())
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
# Limpio el workspace
rm(list = ls())
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
View(alumno_nuevo)
View(alumnos_antiguos)
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos1<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos1)
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos1<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos1)
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos1<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos1)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos1)
View(alumnos2)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
View(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- alumnos[,1]
View(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- alumnos1[,1]
View(alumnos2)
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- alumnos[,1]
View(alumnos2)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- rownames(alumnos)
View(alumnos2)
# Utilizo el coseno que es una medida de similaridad cuando no hay nulos
calculoCoseno <- function(x,y){
coseno <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(coseno)
}
# Creo la matriz de item-to-item (alumno-to-alumno)
alumnos.matriz <- matrix(NA,
nrow=ncol(alumnos2),
ncol=ncol(alumnos2),
dimnames=list(colnames(alumnos2),colnames(alumnos2)))
similaridad_alumnos <- as.data.frame(alumnos.matriz)
# Calculo la similaridad utilizando el coseno para esta matriz
for(i in 1:ncol(alumnos2)) {
for(j in 1:ncol(alumnos2)) {
similaridad_alumnos[i,j]= calculoCoseno(alumnos2[i],alumnos2[j])
}
}
# Convierto similaridad en un DF
similaridad_alumnos <- as.data.frame(similaridad_alumnos)
# Identifico los 6 alumnos mÃ¡s similiares a cada alumno (6 vecinos)
# El primer alumno mas similar es el mismo con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_alumnos),ncol=6,dimnames=list(colnames(similaridad_alumnos)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(alumnos.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_alumnos[order(similaridad_alumnos[,i],decreasing=TRUE),][i]))))
}
# AÃ±ado una columna a vecinos con el alumno_id
vecinos <- cbind(vecinos,alumno_id=c(row.names(vecinos)))
View(similaridad_alumnos)
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
View(vecinos)
# Transformo formato numeric para user_id en vecinos
vecinos$alumno_id <- as.numeric(vecinos$alumno_id)
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
View(vecinos)
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == 71,]
View(vecinos71)
# Elimino alumno_id
vecinos71<-dplyr::select(vecinos71, -alumno_id)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
View(vecinos71)
names(vecinos71)<-c("vecinos")
View(vecinos71)
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Identifico vecinos comunes entre vecinos71 y vecinos_ofertas_nuevas
union<-merge(x = vecinos_ofertas_nuevas, y = vecinos71, by = "vecinos")
View(union)
# Identifico las ofertas nuevas a recomendar al alumno71
rec_alumno71<-union[,-1]
rec_alumno71<-data.frame(rec_alumno71)
names(rec_alumno71)<-c("job_id")
View(rec_alumno71)
rec_alumno71$job_id <- as.numeric(rec_alumno71$job_id)
View(rec_alumno71)
# Elimino job_id repetidas
rec_alumno71<- rec_alumno71 %>% distinct(job_id, .keep_all = TRUE)
View(rec_alumno71)
# Uno los DF rec_alumno71 y ofertas_nuevas para generar las recomendaciones del alumno71
REC_alumno71<-merge(x = rec_alumno71, y = ofertas_nuevas, by = "job_id")
REC_alumno71<-REC_alumno71[,1:5]
View(REC_alumno71)
REC_alumno71<-REC_alumno71[,-2]
View(REC_alumno71)
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
