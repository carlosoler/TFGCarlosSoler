# Convierto similaridad en un DF
similaridad_alumnos <- as.data.frame(similaridad_alumnos)
# Identifico los 6 alumnos más similiares a cada alumno (6 vecinos)
# El primer alumno mas similar es el mismo con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_alumnos),ncol=6,dimnames=list(colnames(similaridad_alumnos)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(alumnos.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_alumnos[order(similaridad_alumnos[,i],decreasing=TRUE),][i]))))
}
# Añado una columna a vecinos con el alumno_id
vecinos <- cbind(vecinos,alumno_id=c(row.names(vecinos)))
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
# Transformo formato numeric para user_id en vecinos
vecinos$alumno_id <- as.numeric(vecinos$alumno_id)
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == alumnonuevo,]
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == 71,]
# Elimino alumno_id
vecinos71<-dplyr::select(vecinos71, -alumno_id)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
names(vecinos71)<-c("vecinos")
# Identifico vecinos comunes entre vecinos71 y vecinos_ofertas_nuevas
union<-merge(x = vecinos_ofertas_nuevas, y = vecinos71, by = "vecinos")
# Identifico las ofertas nuevas a recomendar al alumno71
rec_alumno71<-union[,-1]
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == 71,]
# Elimino alumno_id
vecinos71<-dplyr::select(vecinos71, -alumno_id)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
names(vecinos71)<-c("vecinos")
View(vecinos)
View(vecinos71)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
View(vecinos71)
names(vecinos71)<-c("vecinos")
# Identifico vecinos comunes entre vecinos71 y vecinos_ofertas_nuevas
union<-merge(x = vecinos_ofertas_nuevas, y = vecinos71, by = "vecinos")
# Identifico las ofertas nuevas a recomendar al alumno71
rec_alumno71<-union[,-1]
rec_alumno71<-data.frame(rec_alumno71)
names(rec_alumno71)<-c("job_id")
rec_alumno71$job_id <- as.numeric(rec_alumno71$job_id)
# Elimino job_id repetidas
rec_alumno71<- rec_alumno71 %>% distinct(job_id, .keep_all = TRUE)
# Uno los DF rec_alumno71 y ofertas_nuevas para generar las recomendaciones del alumno71
REC_alumno71<-merge(x = rec_alumno71, y = ofertas_nuevas, by = "job_id")
View(rec_alumno71)
# Limpio el workspace
rm(list = ls())
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
# Limpio el workspace
rm(list = ls())
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
View(alumno_nuevo)
View(alumnos_antiguos)
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos1<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos1)
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos1<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos1)
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos1<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos1)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos1)
View(alumnos2)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
View(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- alumnos[,1]
View(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- alumnos1[,1]
View(alumnos2)
#GET alumno nuevo
username = 'marquitos'
uri = 'http://127.0.0.1:5000/skills/'
uri_get = paste(uri, username, sep="")
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
View(alumnos)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- alumnos[,1]
View(alumnos2)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- rownames(alumnos)
View(alumnos2)
# Utilizo el coseno que es una medida de similaridad cuando no hay nulos
calculoCoseno <- function(x,y){
coseno <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(coseno)
}
# Creo la matriz de item-to-item (alumno-to-alumno)
alumnos.matriz <- matrix(NA,
nrow=ncol(alumnos2),
ncol=ncol(alumnos2),
dimnames=list(colnames(alumnos2),colnames(alumnos2)))
similaridad_alumnos <- as.data.frame(alumnos.matriz)
# Calculo la similaridad utilizando el coseno para esta matriz
for(i in 1:ncol(alumnos2)) {
for(j in 1:ncol(alumnos2)) {
similaridad_alumnos[i,j]= calculoCoseno(alumnos2[i],alumnos2[j])
}
}
# Convierto similaridad en un DF
similaridad_alumnos <- as.data.frame(similaridad_alumnos)
# Identifico los 6 alumnos más similiares a cada alumno (6 vecinos)
# El primer alumno mas similar es el mismo con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_alumnos),ncol=6,dimnames=list(colnames(similaridad_alumnos)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(alumnos.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_alumnos[order(similaridad_alumnos[,i],decreasing=TRUE),][i]))))
}
# Añado una columna a vecinos con el alumno_id
vecinos <- cbind(vecinos,alumno_id=c(row.names(vecinos)))
View(similaridad_alumnos)
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
View(vecinos)
# Transformo formato numeric para user_id en vecinos
vecinos$alumno_id <- as.numeric(vecinos$alumno_id)
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
View(vecinos)
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == 71,]
View(vecinos71)
# Elimino alumno_id
vecinos71<-dplyr::select(vecinos71, -alumno_id)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
View(vecinos71)
names(vecinos71)<-c("vecinos")
View(vecinos71)
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Identifico vecinos comunes entre vecinos71 y vecinos_ofertas_nuevas
union<-merge(x = vecinos_ofertas_nuevas, y = vecinos71, by = "vecinos")
View(union)
# Identifico las ofertas nuevas a recomendar al alumno71
rec_alumno71<-union[,-1]
rec_alumno71<-data.frame(rec_alumno71)
names(rec_alumno71)<-c("job_id")
View(rec_alumno71)
rec_alumno71$job_id <- as.numeric(rec_alumno71$job_id)
View(rec_alumno71)
# Elimino job_id repetidas
rec_alumno71<- rec_alumno71 %>% distinct(job_id, .keep_all = TRUE)
View(rec_alumno71)
# Uno los DF rec_alumno71 y ofertas_nuevas para generar las recomendaciones del alumno71
REC_alumno71<-merge(x = rec_alumno71, y = ofertas_nuevas, by = "job_id")
REC_alumno71<-REC_alumno71[,1:5]
View(REC_alumno71)
REC_alumno71<-REC_alumno71[,-2]
View(REC_alumno71)
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
library(curl)
plumber::plumb(file='alumno_nuevo.R')$run()
library(plumber)
alumno_nuevo <- plumb("alumno_nuevo.R")
ofertas_nuevas <- plumb("ofertas_nuevas.R")
alumno_nuevo$run(port=8015)
ofertas_nuevas$run(port=8016)
ofertas_nuevas$run(port=8016)
apis <- plumb("apis.R")
apis$run(port=8015)
#GET alumno nuevo
alumno_id = id_alum
#* @post /recomendacion_alumno_nuevo
recomendacion_alumno_nuevo <- function(id_alum) {
#GET alumno nuevo
alumno_id = id_alum
uri = 'http://127.0.0.1:5000/alumnos/'
uri2 = '/CV'
uri_get = paste(uri, alumno_id, uri2,sep="")
print(uri_get)
curl_uri <- curl_fetch_memory(uri_get)
xxx <- jsonlite::prettify(rawToChar(curl_uri$content))
jjj <- fromJSON(xxx)
df_xxx <- as.data.frame(jjj)
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<- df_xxx
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos_antiguos<-dplyr::select(alumnos_antiguos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
alumno_nuevo<-dplyr::select(alumno_nuevo, -alumno_id, -id)
#Ordeno alumno nuevo
alumno_nuevo <- alumno_nuevo[,c(14, 25, 15, 1, 12, 5, 34, 7, 27, 16, 20, 8, 28, 22, 10, 9, 23, 11, 13, 31, 33, 17, 4, 21, 2, 3, 6, 18, 24, 32, 35, 36, 30, 19, 26, 29 )]
# Renombro las columnas de alumnosnuevos como las de alumnosantiguos
colnames(alumno_nuevo) <- colnames(alumnos_antiguos)
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- rownames(alumnos)
# Utilizo el coseno que es una medida de similaridad cuando no hay nulos
calculoCoseno <- function(x,y){
coseno <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(coseno)
}
# Creo la matriz de item-to-item (alumno-to-alumno)
alumnos.matriz <- matrix(NA,
nrow=ncol(alumnos2),
ncol=ncol(alumnos2),
dimnames=list(colnames(alumnos2),colnames(alumnos2)))
similaridad_alumnos <- as.data.frame(alumnos.matriz)
# Calculo la similaridad utilizando el coseno para esta matriz
for(i in 1:ncol(alumnos2)) {
for(j in 1:ncol(alumnos2)) {
similaridad_alumnos[i,j]= calculoCoseno(alumnos2[i],alumnos2[j])
}
}
# Convierto similaridad en un DF
similaridad_alumnos <- as.data.frame(similaridad_alumnos)
# Identifico los 6 alumnos más similiares a cada alumno (6 vecinos)
# El primer alumno mas similar es el mismo con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_alumnos),ncol=6,dimnames=list(colnames(similaridad_alumnos)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(alumnos.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_alumnos[order(similaridad_alumnos[,i],decreasing=TRUE),][i]))))
}
# Añado una columna a vecinos con el alumno_id
vecinos <- cbind(vecinos,alumno_id=c(row.names(vecinos)))
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
# Transformo formato numeric para user_id en vecinos
vecinos$alumno_id <- as.numeric(vecinos$alumno_id)
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == 71,]
# Elimino alumno_id
vecinos71<-dplyr::select(vecinos71, -alumno_id)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
names(vecinos71)<-c("vecinos")
# Identifico vecinos comunes entre vecinos71 y vecinos_ofertas_nuevas
union<-merge(x = vecinos_ofertas_nuevas, y = vecinos71, by = "vecinos")
# Identifico las ofertas nuevas a recomendar al alumno71
rec_alumno71<-union[,-1]
rec_alumno71<-data.frame(rec_alumno71)
names(rec_alumno71)<-c("job_id")
rec_alumno71$job_id <- as.numeric(rec_alumno71$job_id)
# Elimino job_id repetidas
rec_alumno71<- rec_alumno71 %>% distinct(job_id, .keep_all = TRUE)
# Uno los DF rec_alumno71 y ofertas_nuevas para generar las recomendaciones del alumno71
REC_alumno71<-merge(x = rec_alumno71, y = ofertas_nuevas, by = "job_id")
REC_alumno71<-REC_alumno71[,1:5]
REC_alumno71<-REC_alumno71[,-2]
# Creo archivo xlsx y json
# write.xlsx(REC_alumno71,"REC_alumno71.xlsx")
# REC_alumno71 = toJSON(REC_alumno71)
# write(REC_alumno71,"REC_alumno71.json")
return(REC_alumno71)
}
#GET alumno nuevo
alumno_id = 71
uri = 'http://127.0.0.1:5000/alumnos/'
uri2 = '/CV'
uri_get = paste(uri, alumno_id, uri2,sep="")
print(uri_get)
library(plumber)
apis <- plumb("apis.R")
apis$run(port=8015)
plumb(file='apis.R')$run()
library(plumber)
apis <- plumb("apis.R")
apis$run(port=8015)
plumber::plumb(file='apis.R')$run()
qnorm(0.95,8,2/sqrt(5))
qnorm(0.95,0,1)
library(plumber)
apis <- plumb("apis.R")
apis$run(port=8015)
library(plumber)
apis <- plumb("apis.R")
apis$run(port=8015)
library(plumber)
apis <- plumb("apis.R")
apis$run(port=8015)
library(plumber)
apis <- plumb("apis.R")
apis$run(port=8015)
# Cargo los datos
ofertas_asignadas<-read.xlsx("ofertas_asign.xlsx")
# Cargo las librerías que voy a necesitar
library(recommenderlab)
# Cargo las librerías que voy a necesitar
library(recommenderlab)
# Cargo las librerías que voy a necesitar
library(recommenderlab)
# Cargo las librerías que voy a necesitar
library(recommenderlab)
# Cargo las librerías que voy a necesitar
library(recommenderlab)
library(clusterSim)
library(reshape2)
library(tidyverse)
library(Matrix)
library(funModeling)
library(openxlsx)
library(rjson)
library(curl)
library(jsonlite)
# Quito la notación científica
options(scipen=999)
# Cargo los datos
ofertas_asignadas<-read.xlsx("ofertas_asign.xlsx")
View(ofertas_asignadas)
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
View(ofertas_nuevas)
# Uno ofertas_asignadas con ofertas_nuevas
ofertas<-rbind(ofertas_asignadas,ofertas_nuevas)
View(ofertas)
# Parto de ofertas y elimino las columnas con info de las ofertas no relevante
ofertas1<-dplyr::select(ofertas,-alumno_id,-job_id,-empresa_nombre,-job_tittle,-ciudad)
View(ofertas1)
# Transpongo ofertas1(80x13) y obtengo ofertas2 (13x80)
ofertas2 <- t(ofertas1)
View(ofertas2)
# Convierto ofertas2 en un DF
ofertas2<-data.frame(ofertas2)
View(ofertas2)
# Renombro las columnas de ofertas2 como las de ofertas
colnames(ofertas2) <- ofertas[,2]
View(ofertas2)
# Utilizo el coseno que es una medida de similaridad cuando no hay nulos
calculoCoseno <- function(x,y){
coseno <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(coseno)
}
# Creo la matriz de item-to-item (oferta-to-oferta)
ofertas.matriz <- matrix(NA,
nrow=ncol(ofertas2),
ncol=ncol(ofertas2),
dimnames=list(colnames(ofertas2),colnames(ofertas2)))
similaridad_ofertas <- as.data.frame(ofertas.matriz)
View(similaridad_ofertas)
# Calculo la similaridad utilizando el coseno para esta matriz
for(i in 1:ncol(ofertas2)) {
for(j in 1:ncol(ofertas2)) {
similaridad_ofertas[i,j]= calculoCoseno(ofertas2[i],ofertas2[j])
}
}
# Convierto similaridad_ofertas en un DF
similaridad_ofertas <- as.data.frame(similaridad_ofertas)
View(similaridad_ofertas)
# Identifico las 6 ofertas más similiares a cada oferta (6 ofertas)
# La primera oferta mas similar es ella misma con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_ofertas),ncol=6,dimnames=list(colnames(similaridad_ofertas)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(ofertas.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_ofertas[order(similaridad_ofertas[,i],decreasing=TRUE),][i]))))
}
# Añado una columna a vecinos con el job_id
vecinos <- cbind(vecinos,job_id=c(row.names(vecinos)))
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
View(vecinos)
# Transformo formato numeric para job_id en vecinos
vecinos$job_id <- as.numeric(vecinos$job_id)
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
View(vecinos)
View(vecinos)
# Identifico vecinos ofertas_nuevas (71:80)
vecinos_ofertas_nuevas<-vecinos[vecinos$job_id == a:b,]
# Identifico vecinos ofertas_nuevas (71:80)
vecinos_ofertas_nuevas<-vecinos[vecinos$job_id == 71:80,]
View(vecinos_ofertas_nuevas)
# Identifico vecinos ofertas_nuevas (71:80)
vecinos_ofertas_nuevas<-vecinos[vecinos$job_id == a:b,]
# Transformo el dataframe
vecinos_ofertas_nuevas<-vecinos_ofertas_nuevas%>%
gather(key="V",value="vecinos",2:6)
vecinos_ofertas_nuevas<-dplyr::select(vecinos_ofertas_nuevas, -V)
View(vecinos_ofertas_nuevas)
# Creo archivo xlsx
write.xlsx(vecinos_ofertas_nuevas,"vecinos_ofertas_nuevas.xlsx")
