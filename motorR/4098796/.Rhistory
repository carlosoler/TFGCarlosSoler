plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='ofertas_nuevas.R')$run()
# Cargo las librerías que voy a necesitar
library(recommenderlab)
library(clusterSim)
library(reshape2)
library(tidyverse)
library(Matrix)
library(funModeling)
library(openxlsx)
library(rjson)
# Quito la notación científica
options(scipen=999)
#* @post /ofertas_nuevas
ofertas_nuevas <- function(a,b) {
# Cargo los datos
ofertas_asignadas<-read.xlsx("ofertas_asign.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Uno ofertas_asignadas con ofertas_nuevas
ofertas<-rbind(ofertas_asignadas,ofertas_nuevas)
# Parto de ofertas y elimino las columnas con info de las ofertas no relevante
ofertas1<-select(ofertas, -alumno_id,-job_id,-empresa_nombre,-job_tittle,-ciudad)
# Transpongo ofertas1(80x13) y obtengo ofertas2 (13x80)
ofertas2 <- t(ofertas1)
# Convierto ofertas2 en un DF
ofertas2<-data.frame(ofertas2)
# Renombro las columnas de ofertas2 como las de ofertas
colnames(ofertas2) <- ofertas[,2]
# Utilizo el coseno que es una medida de similaridad cuando no hay nulos
calculoCoseno <- function(x,y){
coseno <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(coseno)
}
# Creo la matriz de item-to-item (oferta-to-oferta)
ofertas.matriz <- matrix(NA,
nrow=ncol(ofertas2),
ncol=ncol(ofertas2),
dimnames=list(colnames(ofertas2),colnames(ofertas2)))
similaridad_ofertas <- as.data.frame(ofertas.matriz)
# Calculo la similaridad utilizando el coseno para esta matriz
for(i in 1:ncol(ofertas2)) {
for(j in 1:ncol(ofertas2)) {
similaridad_ofertas[i,j]= calculoCoseno(ofertas2[i],ofertas2[j])
}
}
# Convierto similaridad_ofertas en un DF
similaridad_ofertas <- as.data.frame(similaridad_ofertas)
# Identifico las 6 ofertas más similiares a cada oferta (6 ofertas)
# La primera oferta mas similar es ella misma con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_ofertas),ncol=6,dimnames=list(colnames(similaridad_ofertas)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(ofertas.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_ofertas[order(similaridad_ofertas[,i],decreasing=TRUE),][i]))))
}
# Añado una columna a vecinos con el job_id
vecinos <- cbind(vecinos,job_id=c(row.names(vecinos)))
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
# Transformo formato numeric para job_id en vecinos
vecinos$job_id <- as.numeric(vecinos$job_id)
# Elimino V2
vecinos<-select(vecinos, -V2)
# Identifico vecinos ofertas_nuevas (71:80)
vecinos_ofertas_nuevas<-vecinos[vecinos$job_id == a:b,]
# Transformo el dataframe
vecinos_ofertas_nuevas<-vecinos_ofertas_nuevas%>%
gather(key="V",value="vecinos",2:6)
vecinos_ofertas_nuevas<-select(vecinos_ofertas_nuevas, -V)
# Creo archivo xlsx
write.xlsx(vecinos_ofertas_nuevas,"vecinos_ofertas_nuevas.xlsx")
return(vecinos_ofertas_nuevas)
}
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
# Limpio el workspace
rm(list = ls())
# Cambio el directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Cargo las librerías que voy a necesitar
library(recommenderlab)
library(clusterSim)
library(reshape2)
library(tidyverse)
library(Matrix)
library(funModeling)
library(openxlsx)
library(rjson)
# Quito la notación científica
options(scipen=999)
#* @post /recomendacion_alumno_nuevo
recomendacion_alumno_nuevo <- function(alumnonuevo) {
# Cargo los datos
alumnos_antiguos<-read.xlsx("alumnos_antiguos.xlsx")
alumno_nuevo<-read.xlsx("alumno_nuevo.xlsx")
vecinos_ofertas_nuevas<-read.xlsx("vecinos_ofertas_nuevas.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Uno el alumno_nuevo con los alumnos_antiguos
alumnos<-rbind(alumnos_antiguos,alumno_nuevo)
# Parto de alumnos y elimino las columnas con info de los alumnos primera columna (me quedo solo con las skills)
alumnos1<-select(alumnos, -alumno_id, -username,-password, -nombre, -apellido, -telefono, -email)
# Transpongo alumnos1(71x36) y obtengo alumnos2 (36x71)
alumnos2 <- t(alumnos1)
# Convierto alumnos2 en un DF
alumnos2<-data.frame(alumnos2)
# Renombro las columnas de alumnos2 como las de alumnos
colnames(alumnos2) <- alumnos[,1]
# Utilizo el coseno que es una medida de similaridad cuando no hay nulos
calculoCoseno <- function(x,y){
coseno <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(coseno)
}
# Creo la matriz de item-to-item (alumno-to-alumno)
alumnos.matriz <- matrix(NA,
nrow=ncol(alumnos2),
ncol=ncol(alumnos2),
dimnames=list(colnames(alumnos2),colnames(alumnos2)))
similaridad_alumnos <- as.data.frame(alumnos.matriz)
# Calculo la similaridad utilizando el coseno para esta matriz
for(i in 1:ncol(alumnos2)) {
for(j in 1:ncol(alumnos2)) {
similaridad_alumnos[i,j]= calculoCoseno(alumnos2[i],alumnos2[j])
}
}
# Convierto similaridad en un DF
similaridad_alumnos <- as.data.frame(similaridad_alumnos)
# Identifico los 6 alumnos más similiares a cada alumno (6 vecinos)
# El primer alumno mas similar es el mismo con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_alumnos),ncol=6,dimnames=list(colnames(similaridad_alumnos)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(alumnos.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_alumnos[order(similaridad_alumnos[,i],decreasing=TRUE),][i]))))
}
# Añado una columna a vecinos con el alumno_id
vecinos <- cbind(vecinos,alumno_id=c(row.names(vecinos)))
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
# Transformo formato numeric para user_id en vecinos
vecinos$alumno_id <- as.numeric(vecinos$alumno_id)
# Elimino V2
vecinos<-select(vecinos, -V2)
# Identifico vecinos alumno71
vecinos71<-vecinos[vecinos$alumno_id == alumnonuevo,]
# Elimino alumno_id
vecinos71<-select(vecinos71, -alumno_id)
# Traspongo vecinos71
vecinos71<-t(vecinos71)
vecinos71<-data.frame(vecinos71)
names(vecinos71)<-c("vecinos")
# Identifico vecinos comunes entre vecinos71 y vecinos_ofertas_nuevas
union<-merge(x = vecinos_ofertas_nuevas, y = vecinos71, by = "vecinos")
# Identifico las ofertas nuevas a recomendar al alumno71
rec_alumno71<-union[,-1]
rec_alumno71<-data.frame(rec_alumno71)
names(rec_alumno71)<-c("job_id")
rec_alumno71$job_id <- as.numeric(rec_alumno71$job_id)
# Elimino job_id repetidas
rec_alumno71<- rec_alumno71 %>% distinct(job_id, .keep_all = TRUE)
# Uno los DF rec_alumno71 y ofertas_nuevas para generar las recomendaciones del alumno71
REC_alumno71<-merge(x = rec_alumno71, y = ofertas_nuevas, by = "job_id")
REC_alumno71<-REC_alumno71[,1:5]
REC_alumno71<-REC_alumno71[,-2]
# Creo archivo xlsx y json
# write.xlsx(REC_alumno71,"REC_alumno71.xlsx")
# REC_alumno71 = toJSON(REC_alumno71)
# write(REC_alumno71,"REC_alumno71.json")
return(REC_alumno71)
}
View(recomendacion_alumno_nuevo)
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
install.packages("forcats")
install.packages("stringr")
install.packages("dplyr")
install.packages("purrr")
install.packages("readr")
install.packages("tidyr")
install.packages("tibble")
install.packages("tidyverse")
install.packages("clusterSin")
install.packages("MASS")
install.packages("cluster")
plumber::plumb(file='ofertas_nuevas.R')$run()
install.packages("proxy")
install.packages("proxy")
install.packages("recommenderlab")
install.packages("registry")
install.packages("proxy")
install.packages("arules")
plumber::plumb(file='ofertas_nuevas.R')$run()
install.packages("rjson")
install.packages("openxlsx")
install.packages("funModeling")
install.packages("Hmisc")
install.packages("Formula")
install.packages("survival")
install.packages("lattice")
install.packages("lattice")
install.packages("Matrix")
install.packages("rjson")
install.packages("reshape2")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("utils")
library("forcats")
library("forcats")
library("forcats")
library("forcats")
library("forcats")
library("forcats")
library("forcats")
library("stringr")
library("dplyr")
library("forcats")
library("stringr")
library("dplyr")
library("purrr")
library("readr")
library("tidyr")
library("tibble")
library("tidyverse")
library("clusterSin")
library("MASS")
library("cluster")
library("proxy")
library("recommenderlab")
library("registry")
library("arules")
library("rjson")
library("openxlsx")
library("funModeling")
library("Hmisc")
library("Formula")
library("survival")
library("lattice")
library("Matrix")
library("reshape2")
library("stats")
library("graphics")
library("grDevices")
library("utils")
library("datasets")
library("methods")
library("base")
library("Matrix")
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
install.packages("clusterSim")
library("clusterSim")
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='ofertas_nuevas.R')$run()
# Cargo los datos
ofertas_asignadas<-read.xlsx("ofertas_asign.xlsx")
ofertas_nuevas<-read.xlsx("ofertas_nuevas.xlsx")
# Uno ofertas_asignadas con ofertas_nuevas
ofertas<-rbind(ofertas_asignadas,ofertas_nuevas)
# Parto de ofertas y elimino las columnas con info de las ofertas no relevante
ofertas1<-select(ofertas, -alumno_id,-job_id,-empresa_nombre,-job_tittle,-ciudad)
View(ofertas)
# Parto de ofertas y elimino las columnas con info de las ofertas no relevante
ofertas1<-select(ofertas,-alumno_id,-job_id,-empresa_nombre,-job_tittle,-ciudad)
ofertas<-data_frame(ofertas)
# Parto de ofertas y elimino las columnas con info de las ofertas no relevante
ofertas1<-select(ofertas,-alumno_id,-job_id,-empresa_nombre,-job_tittle,-ciudad)
# Parto de ofertas y elimino las columnas con info de las ofertas no relevante
ofertas1<-dplyr::select(ofertas,-alumno_id,-job_id,-empresa_nombre,-job_tittle,-ciudad)
# Transpongo ofertas1(80x13) y obtengo ofertas2 (13x80)
ofertas2 <- t(ofertas1)
# Convierto ofertas2 en un DF
ofertas2<-data.frame(ofertas2)
# Renombro las columnas de ofertas2 como las de ofertas
colnames(ofertas2) <- ofertas[,2]
# Utilizo el coseno que es una medida de similaridad cuando no hay nulos
calculoCoseno <- function(x,y){
coseno <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(coseno)
}
# Creo la matriz de item-to-item (oferta-to-oferta)
ofertas.matriz <- matrix(NA,
nrow=ncol(ofertas2),
ncol=ncol(ofertas2),
dimnames=list(colnames(ofertas2),colnames(ofertas2)))
similaridad_ofertas <- as.data.frame(ofertas.matriz)
# Calculo la similaridad utilizando el coseno para esta matriz
for(i in 1:ncol(ofertas2)) {
for(j in 1:ncol(ofertas2)) {
similaridad_ofertas[i,j]= calculoCoseno(ofertas2[i],ofertas2[j])
}
}
# Convierto similaridad_ofertas en un DF
similaridad_ofertas <- as.data.frame(similaridad_ofertas)
# Identifico las 6 ofertas más similiares a cada oferta (6 ofertas)
# La primera oferta mas similar es ella misma con una similitud de 1
# Creo la matriz de vecinos (72x6)
vecinos <- matrix(NA, nrow=ncol(similaridad_ofertas),ncol=6,dimnames=list(colnames(similaridad_ofertas)))
# Identifico a los 6 vecinos para cada alumno
for(i in 1:ncol(ofertas.matriz)){
vecinos[i,] <- (t(head(n=6,rownames(similaridad_ofertas[order(similaridad_ofertas[,i],decreasing=TRUE),][i]))))
}
# Añado una columna a vecinos con el job_id
vecinos <- cbind(vecinos,job_id=c(row.names(vecinos)))
# Ordeno las columnas de vecinos
vecinos<-vecinos[, c(7,1,2,3,4,5,6)]
# Convierto vecinos en un DF
vecinos<-data.frame(vecinos)
# Transformo formato numeric para job_id en vecinos
vecinos$job_id <- as.numeric(vecinos$job_id)
# Elimino V2
vecinos<-select(vecinos, -V2)
# Elimino V2
vecinos<-dplyr::select(vecinos, -V2)
# Identifico vecinos ofertas_nuevas (71:80)
vecinos_ofertas_nuevas<-vecinos[vecinos$job_id == a:b,]
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
plumber::plumb(file='ofertas_nuevas.R')$run()
plumber::plumb(file='alumno_nuevo.R')$run()
